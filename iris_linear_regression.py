# -*- coding: utf-8 -*-
"""iris_Linear_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QFTaQ0lTYYlUmjNwjhOW-rXSk-mKUVSs

# **Importing Required Libraries**
"""

import pandas as pd
from io import StringIO
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import cross_val_score

"""# **Reading IRIS Data Set | Data Exploration**


"""

url = "http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
dframe = pd.read_csv(url)
dframe.columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
# This will return a Series with unique values as indexes and counts as values.
value_counts = dframe['species'].value_counts()
print("Shape of the dataframe\n\n{}\n".format(dframe.shape))
print("Data column\tdata types\n\n{}\n".format(dframe.dtypes))
print("Classes\t\trow count \n\n{}\n".format(value_counts))
print("{}\n".format(dframe.describe()))
print("Checking for Null values\n\n{}\n".format(dframe.isnull().sum()))

# Grouping the DataFrame by species
group = dframe.groupby('species')

# Iterate over each species and generate a DataFrame for every class
for cls_name, grp_df in group:
    correlation_matrix = grp_df.corr(numeric_only=True)
    # correlation matrix Heatmap for species
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
    plt.title('Correlation Heatmap for {}'.format(cls_name))
    plt.show()

"""# **Splitting Data into Training and Testing | Training Linear Regression Model**


"""

# Define features and target variable
X = dframe[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]  # Features
Y = dframe['species']  # Target variable

sepal_to_int_map = {
    "Iris-versicolor":0,
    "Iris-virginica": 1,
    "Iris-setosa":2
}
# Assuming sentosa vs other species In order to make this a binary classification problem
Y_binary = Y.map(sepal_to_int_map)
print(Y_binary)

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y_binary, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, Y_train)

"""# **Classification of testing data | Accuracy | Cross Valuation Score**"""

test_pred = model.predict(X_test)
print(test_pred)

# Convert predictions to binary class labels

# step = 0.1
# max_acc = 0
# l_max ,r_max = 0,0
# for x in range(0,11):
#   l = x*step
#   for y in range(11,21):
#     r = y* step
#     predicted_classes = np.where(test_pred >= r, 2, np.where( test_pred <=l , 0, 1 ) )
#     test_accuracy = accuracy_score(Y_test, predicted_classes)
#     if test_accuracy > max_acc:
#       max_acc = test_accuracy
#       l_max = l
#       r_max = r

# print(l_max,r_max,max_acc)

predicted_classes = np.where(test_pred >= 1.4, 2, np.where( test_pred <=0.2 , 0, 1 ) )
print(predicted_classes)

''' 1.2. 0.7   acc 0.63333

'''
# Calculate accuracy on the test data
test_accuracy = accuracy_score(Y_test, predicted_classes)
print("Test Accuracy:{}\n".format(test_accuracy))

# Perform 5-fold cross-validation
cv_scores = cross_val_score(model, X, Y_binary, cv=5, scoring='neg_mean_absolute_error')
cv_scores = -cv_scores
print("5-fold Cross-Validation MAE Scores:{}".format(cv_scores))
print("Mean MAE:{}\n".format(cv_scores.mean()))

# Perform 10-fold cross-validation
cv_scores = cross_val_score(model, X, Y_binary, cv=10, scoring='neg_mean_absolute_error')
cv_scores = -cv_scores
print("10-fold Cross-Validation MAE Scores:{}".format(cv_scores))
print("Mean MAE:{}\n".format(cv_scores.mean()))

